// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ChannelMessage.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__CHANNELMESSAGE_HPP
#define FAST_DDS_GENERATED__CHANNELMESSAGE_HPP

#include <cstdint>
#include <utility>
#include "Header.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CHANNELMESSAGE_SOURCE)
#define CHANNELMESSAGE_DllAPI __declspec( dllexport )
#else
#define CHANNELMESSAGE_DllAPI __declspec( dllimport )
#endif // CHANNELMESSAGE_SOURCE
#else
#define CHANNELMESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CHANNELMESSAGE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure ChannelMessage defined by the user in the IDL file.
 * @ingroup ChannelMessage
 */
class ChannelMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ChannelMessage()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ChannelMessage()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ChannelMessage that will be copied.
     */
    eProsima_user_DllExport ChannelMessage(
            const ChannelMessage& x)
    {
                    m_stamp = x.m_stamp;

                    m_ChannelID = x.m_ChannelID;

                    m_SatelliteID = x.m_SatelliteID;

                    m_ConstellationID = x.m_ConstellationID;

                    m_SignalID = x.m_SignalID;

                    m_ChannelStatus = x.m_ChannelStatus;

                    m_Week = x.m_Week;

                    m_ToW = x.m_ToW;

                    m_Doppler = x.m_Doppler;

                    m_DopplerVariance = x.m_DopplerVariance;

                    m_Pseudorange = x.m_Pseudorange;

                    m_PseudorangeVariance = x.m_PseudorangeVariance;

                    m_CarrierPhase = x.m_CarrierPhase;

                    m_CarrierPhaseVariance = x.m_CarrierPhaseVariance;

                    m_CNo = x.m_CNo;

                    m_Azimuth = x.m_Azimuth;

                    m_Elevation = x.m_Elevation;

                    m_IE = x.m_IE;

                    m_IP = x.m_IP;

                    m_IL = x.m_IL;

                    m_QE = x.m_QE;

                    m_QP = x.m_QP;

                    m_QL = x.m_QL;

                    m_TapSpace = x.m_TapSpace;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ChannelMessage that will be copied.
     */
    eProsima_user_DllExport ChannelMessage(
            ChannelMessage&& x) noexcept
    {
        m_stamp = std::move(x.m_stamp);
        m_ChannelID = x.m_ChannelID;
        m_SatelliteID = x.m_SatelliteID;
        m_ConstellationID = x.m_ConstellationID;
        m_SignalID = x.m_SignalID;
        m_ChannelStatus = x.m_ChannelStatus;
        m_Week = x.m_Week;
        m_ToW = x.m_ToW;
        m_Doppler = x.m_Doppler;
        m_DopplerVariance = x.m_DopplerVariance;
        m_Pseudorange = x.m_Pseudorange;
        m_PseudorangeVariance = x.m_PseudorangeVariance;
        m_CarrierPhase = x.m_CarrierPhase;
        m_CarrierPhaseVariance = x.m_CarrierPhaseVariance;
        m_CNo = x.m_CNo;
        m_Azimuth = x.m_Azimuth;
        m_Elevation = x.m_Elevation;
        m_IE = x.m_IE;
        m_IP = x.m_IP;
        m_IL = x.m_IL;
        m_QE = x.m_QE;
        m_QP = x.m_QP;
        m_QL = x.m_QL;
        m_TapSpace = x.m_TapSpace;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ChannelMessage that will be copied.
     */
    eProsima_user_DllExport ChannelMessage& operator =(
            const ChannelMessage& x)
    {

                    m_stamp = x.m_stamp;

                    m_ChannelID = x.m_ChannelID;

                    m_SatelliteID = x.m_SatelliteID;

                    m_ConstellationID = x.m_ConstellationID;

                    m_SignalID = x.m_SignalID;

                    m_ChannelStatus = x.m_ChannelStatus;

                    m_Week = x.m_Week;

                    m_ToW = x.m_ToW;

                    m_Doppler = x.m_Doppler;

                    m_DopplerVariance = x.m_DopplerVariance;

                    m_Pseudorange = x.m_Pseudorange;

                    m_PseudorangeVariance = x.m_PseudorangeVariance;

                    m_CarrierPhase = x.m_CarrierPhase;

                    m_CarrierPhaseVariance = x.m_CarrierPhaseVariance;

                    m_CNo = x.m_CNo;

                    m_Azimuth = x.m_Azimuth;

                    m_Elevation = x.m_Elevation;

                    m_IE = x.m_IE;

                    m_IP = x.m_IP;

                    m_IL = x.m_IL;

                    m_QE = x.m_QE;

                    m_QP = x.m_QP;

                    m_QL = x.m_QL;

                    m_TapSpace = x.m_TapSpace;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ChannelMessage that will be copied.
     */
    eProsima_user_DllExport ChannelMessage& operator =(
            ChannelMessage&& x) noexcept
    {

        m_stamp = std::move(x.m_stamp);
        m_ChannelID = x.m_ChannelID;
        m_SatelliteID = x.m_SatelliteID;
        m_ConstellationID = x.m_ConstellationID;
        m_SignalID = x.m_SignalID;
        m_ChannelStatus = x.m_ChannelStatus;
        m_Week = x.m_Week;
        m_ToW = x.m_ToW;
        m_Doppler = x.m_Doppler;
        m_DopplerVariance = x.m_DopplerVariance;
        m_Pseudorange = x.m_Pseudorange;
        m_PseudorangeVariance = x.m_PseudorangeVariance;
        m_CarrierPhase = x.m_CarrierPhase;
        m_CarrierPhaseVariance = x.m_CarrierPhaseVariance;
        m_CNo = x.m_CNo;
        m_Azimuth = x.m_Azimuth;
        m_Elevation = x.m_Elevation;
        m_IE = x.m_IE;
        m_IP = x.m_IP;
        m_IL = x.m_IL;
        m_QE = x.m_QE;
        m_QP = x.m_QP;
        m_QL = x.m_QL;
        m_TapSpace = x.m_TapSpace;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ChannelMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ChannelMessage& x) const
    {
        return (m_stamp == x.m_stamp &&
           m_ChannelID == x.m_ChannelID &&
           m_SatelliteID == x.m_SatelliteID &&
           m_ConstellationID == x.m_ConstellationID &&
           m_SignalID == x.m_SignalID &&
           m_ChannelStatus == x.m_ChannelStatus &&
           m_Week == x.m_Week &&
           m_ToW == x.m_ToW &&
           m_Doppler == x.m_Doppler &&
           m_DopplerVariance == x.m_DopplerVariance &&
           m_Pseudorange == x.m_Pseudorange &&
           m_PseudorangeVariance == x.m_PseudorangeVariance &&
           m_CarrierPhase == x.m_CarrierPhase &&
           m_CarrierPhaseVariance == x.m_CarrierPhaseVariance &&
           m_CNo == x.m_CNo &&
           m_Azimuth == x.m_Azimuth &&
           m_Elevation == x.m_Elevation &&
           m_IE == x.m_IE &&
           m_IP == x.m_IP &&
           m_IL == x.m_IL &&
           m_QE == x.m_QE &&
           m_QP == x.m_QP &&
           m_QL == x.m_QL &&
           m_TapSpace == x.m_TapSpace);
    }

    /*!
     * @brief Comparison operator.
     * @param x ChannelMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ChannelMessage& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member stamp
     * @param _stamp New value to be copied in member stamp
     */
    eProsima_user_DllExport void stamp(
            const Header& _stamp)
    {
        m_stamp = _stamp;
    }

    /*!
     * @brief This function moves the value in member stamp
     * @param _stamp New value to be moved in member stamp
     */
    eProsima_user_DllExport void stamp(
            Header&& _stamp)
    {
        m_stamp = std::move(_stamp);
    }

    /*!
     * @brief This function returns a constant reference to member stamp
     * @return Constant reference to member stamp
     */
    eProsima_user_DllExport const Header& stamp() const
    {
        return m_stamp;
    }

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport Header& stamp()
    {
        return m_stamp;
    }


    /*!
     * @brief This function sets a value in member ChannelID
     * @param _ChannelID New value for member ChannelID
     */
    eProsima_user_DllExport void ChannelID(
            uint8_t _ChannelID)
    {
        m_ChannelID = _ChannelID;
    }

    /*!
     * @brief This function returns the value of member ChannelID
     * @return Value of member ChannelID
     */
    eProsima_user_DllExport uint8_t ChannelID() const
    {
        return m_ChannelID;
    }

    /*!
     * @brief This function returns a reference to member ChannelID
     * @return Reference to member ChannelID
     */
    eProsima_user_DllExport uint8_t& ChannelID()
    {
        return m_ChannelID;
    }


    /*!
     * @brief This function sets a value in member SatelliteID
     * @param _SatelliteID New value for member SatelliteID
     */
    eProsima_user_DllExport void SatelliteID(
            uint8_t _SatelliteID)
    {
        m_SatelliteID = _SatelliteID;
    }

    /*!
     * @brief This function returns the value of member SatelliteID
     * @return Value of member SatelliteID
     */
    eProsima_user_DllExport uint8_t SatelliteID() const
    {
        return m_SatelliteID;
    }

    /*!
     * @brief This function returns a reference to member SatelliteID
     * @return Reference to member SatelliteID
     */
    eProsima_user_DllExport uint8_t& SatelliteID()
    {
        return m_SatelliteID;
    }


    /*!
     * @brief This function sets a value in member ConstellationID
     * @param _ConstellationID New value for member ConstellationID
     */
    eProsima_user_DllExport void ConstellationID(
            uint8_t _ConstellationID)
    {
        m_ConstellationID = _ConstellationID;
    }

    /*!
     * @brief This function returns the value of member ConstellationID
     * @return Value of member ConstellationID
     */
    eProsima_user_DllExport uint8_t ConstellationID() const
    {
        return m_ConstellationID;
    }

    /*!
     * @brief This function returns a reference to member ConstellationID
     * @return Reference to member ConstellationID
     */
    eProsima_user_DllExport uint8_t& ConstellationID()
    {
        return m_ConstellationID;
    }


    /*!
     * @brief This function sets a value in member SignalID
     * @param _SignalID New value for member SignalID
     */
    eProsima_user_DllExport void SignalID(
            uint8_t _SignalID)
    {
        m_SignalID = _SignalID;
    }

    /*!
     * @brief This function returns the value of member SignalID
     * @return Value of member SignalID
     */
    eProsima_user_DllExport uint8_t SignalID() const
    {
        return m_SignalID;
    }

    /*!
     * @brief This function returns a reference to member SignalID
     * @return Reference to member SignalID
     */
    eProsima_user_DllExport uint8_t& SignalID()
    {
        return m_SignalID;
    }


    /*!
     * @brief This function sets a value in member ChannelStatus
     * @param _ChannelStatus New value for member ChannelStatus
     */
    eProsima_user_DllExport void ChannelStatus(
            uint8_t _ChannelStatus)
    {
        m_ChannelStatus = _ChannelStatus;
    }

    /*!
     * @brief This function returns the value of member ChannelStatus
     * @return Value of member ChannelStatus
     */
    eProsima_user_DllExport uint8_t ChannelStatus() const
    {
        return m_ChannelStatus;
    }

    /*!
     * @brief This function returns a reference to member ChannelStatus
     * @return Reference to member ChannelStatus
     */
    eProsima_user_DllExport uint8_t& ChannelStatus()
    {
        return m_ChannelStatus;
    }


    /*!
     * @brief This function sets a value in member Week
     * @param _Week New value for member Week
     */
    eProsima_user_DllExport void Week(
            uint16_t _Week)
    {
        m_Week = _Week;
    }

    /*!
     * @brief This function returns the value of member Week
     * @return Value of member Week
     */
    eProsima_user_DllExport uint16_t Week() const
    {
        return m_Week;
    }

    /*!
     * @brief This function returns a reference to member Week
     * @return Reference to member Week
     */
    eProsima_user_DllExport uint16_t& Week()
    {
        return m_Week;
    }


    /*!
     * @brief This function sets a value in member ToW
     * @param _ToW New value for member ToW
     */
    eProsima_user_DllExport void ToW(
            double _ToW)
    {
        m_ToW = _ToW;
    }

    /*!
     * @brief This function returns the value of member ToW
     * @return Value of member ToW
     */
    eProsima_user_DllExport double ToW() const
    {
        return m_ToW;
    }

    /*!
     * @brief This function returns a reference to member ToW
     * @return Reference to member ToW
     */
    eProsima_user_DllExport double& ToW()
    {
        return m_ToW;
    }


    /*!
     * @brief This function sets a value in member Doppler
     * @param _Doppler New value for member Doppler
     */
    eProsima_user_DllExport void Doppler(
            double _Doppler)
    {
        m_Doppler = _Doppler;
    }

    /*!
     * @brief This function returns the value of member Doppler
     * @return Value of member Doppler
     */
    eProsima_user_DllExport double Doppler() const
    {
        return m_Doppler;
    }

    /*!
     * @brief This function returns a reference to member Doppler
     * @return Reference to member Doppler
     */
    eProsima_user_DllExport double& Doppler()
    {
        return m_Doppler;
    }


    /*!
     * @brief This function sets a value in member DopplerVariance
     * @param _DopplerVariance New value for member DopplerVariance
     */
    eProsima_user_DllExport void DopplerVariance(
            double _DopplerVariance)
    {
        m_DopplerVariance = _DopplerVariance;
    }

    /*!
     * @brief This function returns the value of member DopplerVariance
     * @return Value of member DopplerVariance
     */
    eProsima_user_DllExport double DopplerVariance() const
    {
        return m_DopplerVariance;
    }

    /*!
     * @brief This function returns a reference to member DopplerVariance
     * @return Reference to member DopplerVariance
     */
    eProsima_user_DllExport double& DopplerVariance()
    {
        return m_DopplerVariance;
    }


    /*!
     * @brief This function sets a value in member Pseudorange
     * @param _Pseudorange New value for member Pseudorange
     */
    eProsima_user_DllExport void Pseudorange(
            double _Pseudorange)
    {
        m_Pseudorange = _Pseudorange;
    }

    /*!
     * @brief This function returns the value of member Pseudorange
     * @return Value of member Pseudorange
     */
    eProsima_user_DllExport double Pseudorange() const
    {
        return m_Pseudorange;
    }

    /*!
     * @brief This function returns a reference to member Pseudorange
     * @return Reference to member Pseudorange
     */
    eProsima_user_DllExport double& Pseudorange()
    {
        return m_Pseudorange;
    }


    /*!
     * @brief This function sets a value in member PseudorangeVariance
     * @param _PseudorangeVariance New value for member PseudorangeVariance
     */
    eProsima_user_DllExport void PseudorangeVariance(
            double _PseudorangeVariance)
    {
        m_PseudorangeVariance = _PseudorangeVariance;
    }

    /*!
     * @brief This function returns the value of member PseudorangeVariance
     * @return Value of member PseudorangeVariance
     */
    eProsima_user_DllExport double PseudorangeVariance() const
    {
        return m_PseudorangeVariance;
    }

    /*!
     * @brief This function returns a reference to member PseudorangeVariance
     * @return Reference to member PseudorangeVariance
     */
    eProsima_user_DllExport double& PseudorangeVariance()
    {
        return m_PseudorangeVariance;
    }


    /*!
     * @brief This function sets a value in member CarrierPhase
     * @param _CarrierPhase New value for member CarrierPhase
     */
    eProsima_user_DllExport void CarrierPhase(
            double _CarrierPhase)
    {
        m_CarrierPhase = _CarrierPhase;
    }

    /*!
     * @brief This function returns the value of member CarrierPhase
     * @return Value of member CarrierPhase
     */
    eProsima_user_DllExport double CarrierPhase() const
    {
        return m_CarrierPhase;
    }

    /*!
     * @brief This function returns a reference to member CarrierPhase
     * @return Reference to member CarrierPhase
     */
    eProsima_user_DllExport double& CarrierPhase()
    {
        return m_CarrierPhase;
    }


    /*!
     * @brief This function sets a value in member CarrierPhaseVariance
     * @param _CarrierPhaseVariance New value for member CarrierPhaseVariance
     */
    eProsima_user_DllExport void CarrierPhaseVariance(
            double _CarrierPhaseVariance)
    {
        m_CarrierPhaseVariance = _CarrierPhaseVariance;
    }

    /*!
     * @brief This function returns the value of member CarrierPhaseVariance
     * @return Value of member CarrierPhaseVariance
     */
    eProsima_user_DllExport double CarrierPhaseVariance() const
    {
        return m_CarrierPhaseVariance;
    }

    /*!
     * @brief This function returns a reference to member CarrierPhaseVariance
     * @return Reference to member CarrierPhaseVariance
     */
    eProsima_user_DllExport double& CarrierPhaseVariance()
    {
        return m_CarrierPhaseVariance;
    }


    /*!
     * @brief This function sets a value in member CNo
     * @param _CNo New value for member CNo
     */
    eProsima_user_DllExport void CNo(
            double _CNo)
    {
        m_CNo = _CNo;
    }

    /*!
     * @brief This function returns the value of member CNo
     * @return Value of member CNo
     */
    eProsima_user_DllExport double CNo() const
    {
        return m_CNo;
    }

    /*!
     * @brief This function returns a reference to member CNo
     * @return Reference to member CNo
     */
    eProsima_user_DllExport double& CNo()
    {
        return m_CNo;
    }


    /*!
     * @brief This function sets a value in member Azimuth
     * @param _Azimuth New value for member Azimuth
     */
    eProsima_user_DllExport void Azimuth(
            double _Azimuth)
    {
        m_Azimuth = _Azimuth;
    }

    /*!
     * @brief This function returns the value of member Azimuth
     * @return Value of member Azimuth
     */
    eProsima_user_DllExport double Azimuth() const
    {
        return m_Azimuth;
    }

    /*!
     * @brief This function returns a reference to member Azimuth
     * @return Reference to member Azimuth
     */
    eProsima_user_DllExport double& Azimuth()
    {
        return m_Azimuth;
    }


    /*!
     * @brief This function sets a value in member Elevation
     * @param _Elevation New value for member Elevation
     */
    eProsima_user_DllExport void Elevation(
            double _Elevation)
    {
        m_Elevation = _Elevation;
    }

    /*!
     * @brief This function returns the value of member Elevation
     * @return Value of member Elevation
     */
    eProsima_user_DllExport double Elevation() const
    {
        return m_Elevation;
    }

    /*!
     * @brief This function returns a reference to member Elevation
     * @return Reference to member Elevation
     */
    eProsima_user_DllExport double& Elevation()
    {
        return m_Elevation;
    }


    /*!
     * @brief This function sets a value in member IE
     * @param _IE New value for member IE
     */
    eProsima_user_DllExport void IE(
            double _IE)
    {
        m_IE = _IE;
    }

    /*!
     * @brief This function returns the value of member IE
     * @return Value of member IE
     */
    eProsima_user_DllExport double IE() const
    {
        return m_IE;
    }

    /*!
     * @brief This function returns a reference to member IE
     * @return Reference to member IE
     */
    eProsima_user_DllExport double& IE()
    {
        return m_IE;
    }


    /*!
     * @brief This function sets a value in member IP
     * @param _IP New value for member IP
     */
    eProsima_user_DllExport void IP(
            double _IP)
    {
        m_IP = _IP;
    }

    /*!
     * @brief This function returns the value of member IP
     * @return Value of member IP
     */
    eProsima_user_DllExport double IP() const
    {
        return m_IP;
    }

    /*!
     * @brief This function returns a reference to member IP
     * @return Reference to member IP
     */
    eProsima_user_DllExport double& IP()
    {
        return m_IP;
    }


    /*!
     * @brief This function sets a value in member IL
     * @param _IL New value for member IL
     */
    eProsima_user_DllExport void IL(
            double _IL)
    {
        m_IL = _IL;
    }

    /*!
     * @brief This function returns the value of member IL
     * @return Value of member IL
     */
    eProsima_user_DllExport double IL() const
    {
        return m_IL;
    }

    /*!
     * @brief This function returns a reference to member IL
     * @return Reference to member IL
     */
    eProsima_user_DllExport double& IL()
    {
        return m_IL;
    }


    /*!
     * @brief This function sets a value in member QE
     * @param _QE New value for member QE
     */
    eProsima_user_DllExport void QE(
            double _QE)
    {
        m_QE = _QE;
    }

    /*!
     * @brief This function returns the value of member QE
     * @return Value of member QE
     */
    eProsima_user_DllExport double QE() const
    {
        return m_QE;
    }

    /*!
     * @brief This function returns a reference to member QE
     * @return Reference to member QE
     */
    eProsima_user_DllExport double& QE()
    {
        return m_QE;
    }


    /*!
     * @brief This function sets a value in member QP
     * @param _QP New value for member QP
     */
    eProsima_user_DllExport void QP(
            double _QP)
    {
        m_QP = _QP;
    }

    /*!
     * @brief This function returns the value of member QP
     * @return Value of member QP
     */
    eProsima_user_DllExport double QP() const
    {
        return m_QP;
    }

    /*!
     * @brief This function returns a reference to member QP
     * @return Reference to member QP
     */
    eProsima_user_DllExport double& QP()
    {
        return m_QP;
    }


    /*!
     * @brief This function sets a value in member QL
     * @param _QL New value for member QL
     */
    eProsima_user_DllExport void QL(
            double _QL)
    {
        m_QL = _QL;
    }

    /*!
     * @brief This function returns the value of member QL
     * @return Value of member QL
     */
    eProsima_user_DllExport double QL() const
    {
        return m_QL;
    }

    /*!
     * @brief This function returns a reference to member QL
     * @return Reference to member QL
     */
    eProsima_user_DllExport double& QL()
    {
        return m_QL;
    }


    /*!
     * @brief This function sets a value in member TapSpace
     * @param _TapSpace New value for member TapSpace
     */
    eProsima_user_DllExport void TapSpace(
            double _TapSpace)
    {
        m_TapSpace = _TapSpace;
    }

    /*!
     * @brief This function returns the value of member TapSpace
     * @return Value of member TapSpace
     */
    eProsima_user_DllExport double TapSpace() const
    {
        return m_TapSpace;
    }

    /*!
     * @brief This function returns a reference to member TapSpace
     * @return Reference to member TapSpace
     */
    eProsima_user_DllExport double& TapSpace()
    {
        return m_TapSpace;
    }



private:

    Header m_stamp;
    uint8_t m_ChannelID{0};
    uint8_t m_SatelliteID{0};
    uint8_t m_ConstellationID{0};
    uint8_t m_SignalID{0};
    uint8_t m_ChannelStatus{0};
    uint16_t m_Week{0};
    double m_ToW{0.0};
    double m_Doppler{0.0};
    double m_DopplerVariance{0.0};
    double m_Pseudorange{0.0};
    double m_PseudorangeVariance{0.0};
    double m_CarrierPhase{0.0};
    double m_CarrierPhaseVariance{0.0};
    double m_CNo{0.0};
    double m_Azimuth{0.0};
    double m_Elevation{0.0};
    double m_IE{0.0};
    double m_IP{0.0};
    double m_IL{0.0};
    double m_QE{0.0};
    double m_QP{0.0};
    double m_QL{0.0};
    double m_TapSpace{0.0};

};

#endif // _FAST_DDS_GENERATED_CHANNELMESSAGE_HPP_


