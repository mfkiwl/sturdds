// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ChannelMessageCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__CHANNELMESSAGECDRAUX_IPP
#define FAST_DDS_GENERATED__CHANNELMESSAGECDRAUX_IPP

#include "ChannelMessageCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ChannelMessage& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.stamp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.ChannelID(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.SatelliteID(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.ConstellationID(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.SignalID(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.ChannelStatus(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.Week(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.ToW(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.Doppler(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.DopplerVariance(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.Pseudorange(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.PseudorangeVariance(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.CarrierPhase(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.CarrierPhaseVariance(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(14),
                data.CNo(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(15),
                data.Azimuth(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(16),
                data.Elevation(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(17),
                data.IE(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(18),
                data.IP(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(19),
                data.IL(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(20),
                data.QE(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(21),
                data.QP(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(22),
                data.QL(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(23),
                data.TapSpace(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ChannelMessage& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.stamp()
        << eprosima::fastcdr::MemberId(1) << data.ChannelID()
        << eprosima::fastcdr::MemberId(2) << data.SatelliteID()
        << eprosima::fastcdr::MemberId(3) << data.ConstellationID()
        << eprosima::fastcdr::MemberId(4) << data.SignalID()
        << eprosima::fastcdr::MemberId(5) << data.ChannelStatus()
        << eprosima::fastcdr::MemberId(6) << data.Week()
        << eprosima::fastcdr::MemberId(7) << data.ToW()
        << eprosima::fastcdr::MemberId(8) << data.Doppler()
        << eprosima::fastcdr::MemberId(9) << data.DopplerVariance()
        << eprosima::fastcdr::MemberId(10) << data.Pseudorange()
        << eprosima::fastcdr::MemberId(11) << data.PseudorangeVariance()
        << eprosima::fastcdr::MemberId(12) << data.CarrierPhase()
        << eprosima::fastcdr::MemberId(13) << data.CarrierPhaseVariance()
        << eprosima::fastcdr::MemberId(14) << data.CNo()
        << eprosima::fastcdr::MemberId(15) << data.Azimuth()
        << eprosima::fastcdr::MemberId(16) << data.Elevation()
        << eprosima::fastcdr::MemberId(17) << data.IE()
        << eprosima::fastcdr::MemberId(18) << data.IP()
        << eprosima::fastcdr::MemberId(19) << data.IL()
        << eprosima::fastcdr::MemberId(20) << data.QE()
        << eprosima::fastcdr::MemberId(21) << data.QP()
        << eprosima::fastcdr::MemberId(22) << data.QL()
        << eprosima::fastcdr::MemberId(23) << data.TapSpace()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ChannelMessage& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.stamp();
                                            break;

                                        case 1:
                                                dcdr >> data.ChannelID();
                                            break;

                                        case 2:
                                                dcdr >> data.SatelliteID();
                                            break;

                                        case 3:
                                                dcdr >> data.ConstellationID();
                                            break;

                                        case 4:
                                                dcdr >> data.SignalID();
                                            break;

                                        case 5:
                                                dcdr >> data.ChannelStatus();
                                            break;

                                        case 6:
                                                dcdr >> data.Week();
                                            break;

                                        case 7:
                                                dcdr >> data.ToW();
                                            break;

                                        case 8:
                                                dcdr >> data.Doppler();
                                            break;

                                        case 9:
                                                dcdr >> data.DopplerVariance();
                                            break;

                                        case 10:
                                                dcdr >> data.Pseudorange();
                                            break;

                                        case 11:
                                                dcdr >> data.PseudorangeVariance();
                                            break;

                                        case 12:
                                                dcdr >> data.CarrierPhase();
                                            break;

                                        case 13:
                                                dcdr >> data.CarrierPhaseVariance();
                                            break;

                                        case 14:
                                                dcdr >> data.CNo();
                                            break;

                                        case 15:
                                                dcdr >> data.Azimuth();
                                            break;

                                        case 16:
                                                dcdr >> data.Elevation();
                                            break;

                                        case 17:
                                                dcdr >> data.IE();
                                            break;

                                        case 18:
                                                dcdr >> data.IP();
                                            break;

                                        case 19:
                                                dcdr >> data.IL();
                                            break;

                                        case 20:
                                                dcdr >> data.QE();
                                            break;

                                        case 21:
                                                dcdr >> data.QP();
                                            break;

                                        case 22:
                                                dcdr >> data.QL();
                                            break;

                                        case 23:
                                                dcdr >> data.TapSpace();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ChannelMessage& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const Header& data);

























    static_cast<void>(scdr);
    static_cast<void>(data);
                        serialize_key(scdr, data.stamp());

                        scdr << data.ChannelID();

                        scdr << data.SatelliteID();

                        scdr << data.ConstellationID();

                        scdr << data.SignalID();

                        scdr << data.ChannelStatus();

                        scdr << data.Week();

                        scdr << data.ToW();

                        scdr << data.Doppler();

                        scdr << data.DopplerVariance();

                        scdr << data.Pseudorange();

                        scdr << data.PseudorangeVariance();

                        scdr << data.CarrierPhase();

                        scdr << data.CarrierPhaseVariance();

                        scdr << data.CNo();

                        scdr << data.Azimuth();

                        scdr << data.Elevation();

                        scdr << data.IE();

                        scdr << data.IP();

                        scdr << data.IL();

                        scdr << data.QE();

                        scdr << data.QP();

                        scdr << data.QL();

                        scdr << data.TapSpace();

}



} // namespace fastcdr
} // namespace eprosima

#endif // FAST_DDS_GENERATED__CHANNELMESSAGECDRAUX_IPP

