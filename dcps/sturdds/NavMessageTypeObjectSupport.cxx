// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavMessageTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "NavMessageTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "NavMessage.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_NavMessage_type_identifier(
        TypeIdentifierPair& type_ids_NavMessage)
{

    ReturnCode_t return_code_NavMessage {eprosima::fastdds::dds::RETCODE_OK};
    return_code_NavMessage =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "NavMessage", type_ids_NavMessage);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_NavMessage)
    {
        StructTypeFlag struct_flags_NavMessage = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_NavMessage = "NavMessage";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_NavMessage;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_NavMessage;
        CompleteTypeDetail detail_NavMessage = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_NavMessage, ann_custom_NavMessage, type_name_NavMessage.to_string());
        CompleteStructHeader header_NavMessage;
        header_NavMessage = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_NavMessage);
        CompleteStructMemberSeq member_seq_NavMessage;
        {
            TypeIdentifierPair type_ids_stamp;
            ReturnCode_t return_code_stamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_stamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Header", type_ids_stamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_stamp)
            {
            ::register_Header_type_identifier(type_ids_stamp);
            }
            StructMemberFlag member_flags_stamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_stamp = 0x00000000;
            bool common_stamp_ec {false};
            CommonStructMember common_stamp {TypeObjectUtils::build_common_struct_member(member_id_stamp, member_flags_stamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_stamp, common_stamp_ec))};
            if (!common_stamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure stamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_stamp = "stamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_stamp;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_stamp = TypeObjectUtils::build_complete_member_detail(name_stamp, member_ann_builtin_stamp, ann_custom_NavMessage);
            CompleteStructMember member_stamp = TypeObjectUtils::build_complete_struct_member(common_stamp, detail_stamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_stamp);
        }
        {
            TypeIdentifierPair type_ids_Week;
            ReturnCode_t return_code_Week {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Week =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_Week);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Week)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Week Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Week = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Week = 0x00000001;
            bool common_Week_ec {false};
            CommonStructMember common_Week {TypeObjectUtils::build_common_struct_member(member_id_Week, member_flags_Week, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Week, common_Week_ec))};
            if (!common_Week_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Week member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Week = "Week";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Week;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Week = TypeObjectUtils::build_complete_member_detail(name_Week, member_ann_builtin_Week, ann_custom_NavMessage);
            CompleteStructMember member_Week = TypeObjectUtils::build_complete_struct_member(common_Week, detail_Week);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Week);
        }
        {
            TypeIdentifierPair type_ids_ToW;
            ReturnCode_t return_code_ToW {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ToW =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_ToW);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ToW)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ToW Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ToW = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ToW = 0x00000002;
            bool common_ToW_ec {false};
            CommonStructMember common_ToW {TypeObjectUtils::build_common_struct_member(member_id_ToW, member_flags_ToW, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ToW, common_ToW_ec))};
            if (!common_ToW_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ToW member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ToW = "ToW";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ToW;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_ToW = TypeObjectUtils::build_complete_member_detail(name_ToW, member_ann_builtin_ToW, ann_custom_NavMessage);
            CompleteStructMember member_ToW = TypeObjectUtils::build_complete_struct_member(common_ToW, detail_ToW);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_ToW);
        }
        {
            TypeIdentifierPair type_ids_Lat;
            ReturnCode_t return_code_Lat {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Lat =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Lat);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Lat)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Lat Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Lat = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Lat = 0x00000003;
            bool common_Lat_ec {false};
            CommonStructMember common_Lat {TypeObjectUtils::build_common_struct_member(member_id_Lat, member_flags_Lat, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Lat, common_Lat_ec))};
            if (!common_Lat_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Lat member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Lat = "Lat";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Lat;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Lat = TypeObjectUtils::build_complete_member_detail(name_Lat, member_ann_builtin_Lat, ann_custom_NavMessage);
            CompleteStructMember member_Lat = TypeObjectUtils::build_complete_struct_member(common_Lat, detail_Lat);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Lat);
        }
        {
            TypeIdentifierPair type_ids_Lon;
            ReturnCode_t return_code_Lon {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Lon =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Lon);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Lon)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Lon Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Lon = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Lon = 0x00000004;
            bool common_Lon_ec {false};
            CommonStructMember common_Lon {TypeObjectUtils::build_common_struct_member(member_id_Lon, member_flags_Lon, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Lon, common_Lon_ec))};
            if (!common_Lon_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Lon member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Lon = "Lon";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Lon;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Lon = TypeObjectUtils::build_complete_member_detail(name_Lon, member_ann_builtin_Lon, ann_custom_NavMessage);
            CompleteStructMember member_Lon = TypeObjectUtils::build_complete_struct_member(common_Lon, detail_Lon);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Lon);
        }
        {
            TypeIdentifierPair type_ids_H;
            ReturnCode_t return_code_H {eprosima::fastdds::dds::RETCODE_OK};
            return_code_H =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_H);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_H)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "H Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_H = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_H = 0x00000005;
            bool common_H_ec {false};
            CommonStructMember common_H {TypeObjectUtils::build_common_struct_member(member_id_H, member_flags_H, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_H, common_H_ec))};
            if (!common_H_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure H member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_H = "H";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_H;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_H = TypeObjectUtils::build_complete_member_detail(name_H, member_ann_builtin_H, ann_custom_NavMessage);
            CompleteStructMember member_H = TypeObjectUtils::build_complete_struct_member(common_H, detail_H);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_H);
        }
        {
            TypeIdentifierPair type_ids_Vn;
            ReturnCode_t return_code_Vn {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Vn =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Vn);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Vn)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Vn Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Vn = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Vn = 0x00000006;
            bool common_Vn_ec {false};
            CommonStructMember common_Vn {TypeObjectUtils::build_common_struct_member(member_id_Vn, member_flags_Vn, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Vn, common_Vn_ec))};
            if (!common_Vn_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Vn member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Vn = "Vn";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Vn;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Vn = TypeObjectUtils::build_complete_member_detail(name_Vn, member_ann_builtin_Vn, ann_custom_NavMessage);
            CompleteStructMember member_Vn = TypeObjectUtils::build_complete_struct_member(common_Vn, detail_Vn);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Vn);
        }
        {
            TypeIdentifierPair type_ids_Ve;
            ReturnCode_t return_code_Ve {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Ve =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Ve);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Ve)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Ve Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Ve = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Ve = 0x00000007;
            bool common_Ve_ec {false};
            CommonStructMember common_Ve {TypeObjectUtils::build_common_struct_member(member_id_Ve, member_flags_Ve, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Ve, common_Ve_ec))};
            if (!common_Ve_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Ve member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Ve = "Ve";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Ve;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Ve = TypeObjectUtils::build_complete_member_detail(name_Ve, member_ann_builtin_Ve, ann_custom_NavMessage);
            CompleteStructMember member_Ve = TypeObjectUtils::build_complete_struct_member(common_Ve, detail_Ve);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Ve);
        }
        {
            TypeIdentifierPair type_ids_Vd;
            ReturnCode_t return_code_Vd {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Vd =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Vd);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Vd)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Vd Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Vd = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Vd = 0x00000008;
            bool common_Vd_ec {false};
            CommonStructMember common_Vd {TypeObjectUtils::build_common_struct_member(member_id_Vd, member_flags_Vd, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Vd, common_Vd_ec))};
            if (!common_Vd_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Vd member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Vd = "Vd";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Vd;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Vd = TypeObjectUtils::build_complete_member_detail(name_Vd, member_ann_builtin_Vd, ann_custom_NavMessage);
            CompleteStructMember member_Vd = TypeObjectUtils::build_complete_struct_member(common_Vd, detail_Vd);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Vd);
        }
        {
            TypeIdentifierPair type_ids_Roll;
            ReturnCode_t return_code_Roll {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Roll =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Roll);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Roll)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Roll Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Roll = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Roll = 0x00000009;
            bool common_Roll_ec {false};
            CommonStructMember common_Roll {TypeObjectUtils::build_common_struct_member(member_id_Roll, member_flags_Roll, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Roll, common_Roll_ec))};
            if (!common_Roll_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Roll member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Roll = "Roll";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Roll;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Roll = TypeObjectUtils::build_complete_member_detail(name_Roll, member_ann_builtin_Roll, ann_custom_NavMessage);
            CompleteStructMember member_Roll = TypeObjectUtils::build_complete_struct_member(common_Roll, detail_Roll);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Roll);
        }
        {
            TypeIdentifierPair type_ids_Pitch;
            ReturnCode_t return_code_Pitch {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Pitch =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Pitch);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Pitch)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Pitch Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Pitch = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Pitch = 0x0000000a;
            bool common_Pitch_ec {false};
            CommonStructMember common_Pitch {TypeObjectUtils::build_common_struct_member(member_id_Pitch, member_flags_Pitch, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Pitch, common_Pitch_ec))};
            if (!common_Pitch_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Pitch member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Pitch = "Pitch";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Pitch;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Pitch = TypeObjectUtils::build_complete_member_detail(name_Pitch, member_ann_builtin_Pitch, ann_custom_NavMessage);
            CompleteStructMember member_Pitch = TypeObjectUtils::build_complete_struct_member(common_Pitch, detail_Pitch);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Pitch);
        }
        {
            TypeIdentifierPair type_ids_Yaw;
            ReturnCode_t return_code_Yaw {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Yaw =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Yaw);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Yaw)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Yaw Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Yaw = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Yaw = 0x0000000b;
            bool common_Yaw_ec {false};
            CommonStructMember common_Yaw {TypeObjectUtils::build_common_struct_member(member_id_Yaw, member_flags_Yaw, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Yaw, common_Yaw_ec))};
            if (!common_Yaw_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Yaw member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Yaw = "Yaw";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Yaw;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Yaw = TypeObjectUtils::build_complete_member_detail(name_Yaw, member_ann_builtin_Yaw, ann_custom_NavMessage);
            CompleteStructMember member_Yaw = TypeObjectUtils::build_complete_struct_member(common_Yaw, detail_Yaw);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Yaw);
        }
        {
            TypeIdentifierPair type_ids_Bias;
            ReturnCode_t return_code_Bias {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Bias =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Bias);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Bias)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Bias Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Bias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Bias = 0x0000000c;
            bool common_Bias_ec {false};
            CommonStructMember common_Bias {TypeObjectUtils::build_common_struct_member(member_id_Bias, member_flags_Bias, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Bias, common_Bias_ec))};
            if (!common_Bias_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Bias member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Bias = "Bias";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Bias;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Bias = TypeObjectUtils::build_complete_member_detail(name_Bias, member_ann_builtin_Bias, ann_custom_NavMessage);
            CompleteStructMember member_Bias = TypeObjectUtils::build_complete_struct_member(common_Bias, detail_Bias);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Bias);
        }
        {
            TypeIdentifierPair type_ids_Drift;
            ReturnCode_t return_code_Drift {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Drift =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Drift);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Drift)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Drift Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Drift = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Drift = 0x0000000d;
            bool common_Drift_ec {false};
            CommonStructMember common_Drift {TypeObjectUtils::build_common_struct_member(member_id_Drift, member_flags_Drift, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Drift, common_Drift_ec))};
            if (!common_Drift_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Drift member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Drift = "Drift";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Drift;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_Drift = TypeObjectUtils::build_complete_member_detail(name_Drift, member_ann_builtin_Drift, ann_custom_NavMessage);
            CompleteStructMember member_Drift = TypeObjectUtils::build_complete_struct_member(common_Drift, detail_Drift);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_Drift);
        }
        {
            TypeIdentifierPair type_ids_P0;
            ReturnCode_t return_code_P0 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P0 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P0);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P0)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P0 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P0 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P0 = 0x0000000e;
            bool common_P0_ec {false};
            CommonStructMember common_P0 {TypeObjectUtils::build_common_struct_member(member_id_P0, member_flags_P0, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P0, common_P0_ec))};
            if (!common_P0_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P0 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P0 = "P0";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P0;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P0 = TypeObjectUtils::build_complete_member_detail(name_P0, member_ann_builtin_P0, ann_custom_NavMessage);
            CompleteStructMember member_P0 = TypeObjectUtils::build_complete_struct_member(common_P0, detail_P0);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P0);
        }
        {
            TypeIdentifierPair type_ids_P1;
            ReturnCode_t return_code_P1 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P1);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P1)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P1 = 0x0000000f;
            bool common_P1_ec {false};
            CommonStructMember common_P1 {TypeObjectUtils::build_common_struct_member(member_id_P1, member_flags_P1, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P1, common_P1_ec))};
            if (!common_P1_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P1 = "P1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P1;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P1 = TypeObjectUtils::build_complete_member_detail(name_P1, member_ann_builtin_P1, ann_custom_NavMessage);
            CompleteStructMember member_P1 = TypeObjectUtils::build_complete_struct_member(common_P1, detail_P1);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P1);
        }
        {
            TypeIdentifierPair type_ids_P2;
            ReturnCode_t return_code_P2 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P2);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P2)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P2 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P2 = 0x00000010;
            bool common_P2_ec {false};
            CommonStructMember common_P2 {TypeObjectUtils::build_common_struct_member(member_id_P2, member_flags_P2, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P2, common_P2_ec))};
            if (!common_P2_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P2 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P2 = "P2";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P2;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P2 = TypeObjectUtils::build_complete_member_detail(name_P2, member_ann_builtin_P2, ann_custom_NavMessage);
            CompleteStructMember member_P2 = TypeObjectUtils::build_complete_struct_member(common_P2, detail_P2);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P2);
        }
        {
            TypeIdentifierPair type_ids_P3;
            ReturnCode_t return_code_P3 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P3 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P3);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P3)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P3 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P3 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P3 = 0x00000011;
            bool common_P3_ec {false};
            CommonStructMember common_P3 {TypeObjectUtils::build_common_struct_member(member_id_P3, member_flags_P3, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P3, common_P3_ec))};
            if (!common_P3_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P3 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P3 = "P3";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P3;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P3 = TypeObjectUtils::build_complete_member_detail(name_P3, member_ann_builtin_P3, ann_custom_NavMessage);
            CompleteStructMember member_P3 = TypeObjectUtils::build_complete_struct_member(common_P3, detail_P3);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P3);
        }
        {
            TypeIdentifierPair type_ids_P4;
            ReturnCode_t return_code_P4 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P4 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P4);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P4)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P4 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P4 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P4 = 0x00000012;
            bool common_P4_ec {false};
            CommonStructMember common_P4 {TypeObjectUtils::build_common_struct_member(member_id_P4, member_flags_P4, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P4, common_P4_ec))};
            if (!common_P4_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P4 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P4 = "P4";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P4;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P4 = TypeObjectUtils::build_complete_member_detail(name_P4, member_ann_builtin_P4, ann_custom_NavMessage);
            CompleteStructMember member_P4 = TypeObjectUtils::build_complete_struct_member(common_P4, detail_P4);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P4);
        }
        {
            TypeIdentifierPair type_ids_P5;
            ReturnCode_t return_code_P5 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P5 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P5);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P5)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P5 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P5 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P5 = 0x00000013;
            bool common_P5_ec {false};
            CommonStructMember common_P5 {TypeObjectUtils::build_common_struct_member(member_id_P5, member_flags_P5, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P5, common_P5_ec))};
            if (!common_P5_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P5 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P5 = "P5";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P5;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P5 = TypeObjectUtils::build_complete_member_detail(name_P5, member_ann_builtin_P5, ann_custom_NavMessage);
            CompleteStructMember member_P5 = TypeObjectUtils::build_complete_struct_member(common_P5, detail_P5);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P5);
        }
        {
            TypeIdentifierPair type_ids_P6;
            ReturnCode_t return_code_P6 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P6 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P6);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P6)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P6 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P6 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P6 = 0x00000014;
            bool common_P6_ec {false};
            CommonStructMember common_P6 {TypeObjectUtils::build_common_struct_member(member_id_P6, member_flags_P6, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P6, common_P6_ec))};
            if (!common_P6_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P6 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P6 = "P6";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P6;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P6 = TypeObjectUtils::build_complete_member_detail(name_P6, member_ann_builtin_P6, ann_custom_NavMessage);
            CompleteStructMember member_P6 = TypeObjectUtils::build_complete_struct_member(common_P6, detail_P6);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P6);
        }
        {
            TypeIdentifierPair type_ids_P7;
            ReturnCode_t return_code_P7 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P7 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P7);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P7)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P7 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P7 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P7 = 0x00000015;
            bool common_P7_ec {false};
            CommonStructMember common_P7 {TypeObjectUtils::build_common_struct_member(member_id_P7, member_flags_P7, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P7, common_P7_ec))};
            if (!common_P7_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P7 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P7 = "P7";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P7;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P7 = TypeObjectUtils::build_complete_member_detail(name_P7, member_ann_builtin_P7, ann_custom_NavMessage);
            CompleteStructMember member_P7 = TypeObjectUtils::build_complete_struct_member(common_P7, detail_P7);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P7);
        }
        {
            TypeIdentifierPair type_ids_P8;
            ReturnCode_t return_code_P8 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P8 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P8);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P8)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P8 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P8 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P8 = 0x00000016;
            bool common_P8_ec {false};
            CommonStructMember common_P8 {TypeObjectUtils::build_common_struct_member(member_id_P8, member_flags_P8, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P8, common_P8_ec))};
            if (!common_P8_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P8 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P8 = "P8";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P8;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P8 = TypeObjectUtils::build_complete_member_detail(name_P8, member_ann_builtin_P8, ann_custom_NavMessage);
            CompleteStructMember member_P8 = TypeObjectUtils::build_complete_struct_member(common_P8, detail_P8);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P8);
        }
        {
            TypeIdentifierPair type_ids_P9;
            ReturnCode_t return_code_P9 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P9 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P9);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P9)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P9 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P9 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P9 = 0x00000017;
            bool common_P9_ec {false};
            CommonStructMember common_P9 {TypeObjectUtils::build_common_struct_member(member_id_P9, member_flags_P9, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P9, common_P9_ec))};
            if (!common_P9_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P9 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P9 = "P9";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P9;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P9 = TypeObjectUtils::build_complete_member_detail(name_P9, member_ann_builtin_P9, ann_custom_NavMessage);
            CompleteStructMember member_P9 = TypeObjectUtils::build_complete_struct_member(common_P9, detail_P9);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P9);
        }
        {
            TypeIdentifierPair type_ids_P10;
            ReturnCode_t return_code_P10 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_P10 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_P10);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_P10)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "P10 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_P10 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_P10 = 0x00000018;
            bool common_P10_ec {false};
            CommonStructMember common_P10 {TypeObjectUtils::build_common_struct_member(member_id_P10, member_flags_P10, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_P10, common_P10_ec))};
            if (!common_P10_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure P10 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_P10 = "P10";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_P10;
            ann_custom_NavMessage.reset();
            CompleteMemberDetail detail_P10 = TypeObjectUtils::build_complete_member_detail(name_P10, member_ann_builtin_P10, ann_custom_NavMessage);
            CompleteStructMember member_P10 = TypeObjectUtils::build_complete_struct_member(common_P10, detail_P10);
            TypeObjectUtils::add_complete_struct_member(member_seq_NavMessage, member_P10);
        }
        CompleteStructType struct_type_NavMessage = TypeObjectUtils::build_complete_struct_type(struct_flags_NavMessage, header_NavMessage, member_seq_NavMessage);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_NavMessage, type_name_NavMessage.to_string(), type_ids_NavMessage))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "NavMessage already registered in TypeObjectRegistry for a different type.");
        }
    }
}

