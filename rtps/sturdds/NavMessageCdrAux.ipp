// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavMessageCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__NAVMESSAGECDRAUX_IPP
#define FAST_DDS_GENERATED__NAVMESSAGECDRAUX_IPP

#include "NavMessageCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {

template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const NavMessage& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.stamp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.Week(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.ToW(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.Lat(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.Lon(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.H(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.Vn(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.Ve(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.Vd(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.Roll(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.Pitch(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.Yaw(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.Bias(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.Drift(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(14),
                data.P0(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(15),
                data.P1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(16),
                data.P2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(17),
                data.P3(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(18),
                data.P4(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(19),
                data.P5(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(20),
                data.P6(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(21),
                data.P7(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(22),
                data.P8(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(23),
                data.P9(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(24),
                data.P10(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const NavMessage& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.stamp()
        << eprosima::fastcdr::MemberId(1) << data.Week()
        << eprosima::fastcdr::MemberId(2) << data.ToW()
        << eprosima::fastcdr::MemberId(3) << data.Lat()
        << eprosima::fastcdr::MemberId(4) << data.Lon()
        << eprosima::fastcdr::MemberId(5) << data.H()
        << eprosima::fastcdr::MemberId(6) << data.Vn()
        << eprosima::fastcdr::MemberId(7) << data.Ve()
        << eprosima::fastcdr::MemberId(8) << data.Vd()
        << eprosima::fastcdr::MemberId(9) << data.Roll()
        << eprosima::fastcdr::MemberId(10) << data.Pitch()
        << eprosima::fastcdr::MemberId(11) << data.Yaw()
        << eprosima::fastcdr::MemberId(12) << data.Bias()
        << eprosima::fastcdr::MemberId(13) << data.Drift()
        << eprosima::fastcdr::MemberId(14) << data.P0()
        << eprosima::fastcdr::MemberId(15) << data.P1()
        << eprosima::fastcdr::MemberId(16) << data.P2()
        << eprosima::fastcdr::MemberId(17) << data.P3()
        << eprosima::fastcdr::MemberId(18) << data.P4()
        << eprosima::fastcdr::MemberId(19) << data.P5()
        << eprosima::fastcdr::MemberId(20) << data.P6()
        << eprosima::fastcdr::MemberId(21) << data.P7()
        << eprosima::fastcdr::MemberId(22) << data.P8()
        << eprosima::fastcdr::MemberId(23) << data.P9()
        << eprosima::fastcdr::MemberId(24) << data.P10()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        NavMessage& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.stamp();
                                            break;

                                        case 1:
                                                dcdr >> data.Week();
                                            break;

                                        case 2:
                                                dcdr >> data.ToW();
                                            break;

                                        case 3:
                                                dcdr >> data.Lat();
                                            break;

                                        case 4:
                                                dcdr >> data.Lon();
                                            break;

                                        case 5:
                                                dcdr >> data.H();
                                            break;

                                        case 6:
                                                dcdr >> data.Vn();
                                            break;

                                        case 7:
                                                dcdr >> data.Ve();
                                            break;

                                        case 8:
                                                dcdr >> data.Vd();
                                            break;

                                        case 9:
                                                dcdr >> data.Roll();
                                            break;

                                        case 10:
                                                dcdr >> data.Pitch();
                                            break;

                                        case 11:
                                                dcdr >> data.Yaw();
                                            break;

                                        case 12:
                                                dcdr >> data.Bias();
                                            break;

                                        case 13:
                                                dcdr >> data.Drift();
                                            break;

                                        case 14:
                                                dcdr >> data.P0();
                                            break;

                                        case 15:
                                                dcdr >> data.P1();
                                            break;

                                        case 16:
                                                dcdr >> data.P2();
                                            break;

                                        case 17:
                                                dcdr >> data.P3();
                                            break;

                                        case 18:
                                                dcdr >> data.P4();
                                            break;

                                        case 19:
                                                dcdr >> data.P5();
                                            break;

                                        case 20:
                                                dcdr >> data.P6();
                                            break;

                                        case 21:
                                                dcdr >> data.P7();
                                            break;

                                        case 22:
                                                dcdr >> data.P8();
                                            break;

                                        case 23:
                                                dcdr >> data.P9();
                                            break;

                                        case 24:
                                                dcdr >> data.P10();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const NavMessage& data)
{
            extern void serialize_key(
                    Cdr& scdr,
                    const Header& data);


























    static_cast<void>(scdr);
    static_cast<void>(data);
                        serialize_key(scdr, data.stamp());

                        scdr << data.Week();

                        scdr << data.ToW();

                        scdr << data.Lat();

                        scdr << data.Lon();

                        scdr << data.H();

                        scdr << data.Vn();

                        scdr << data.Ve();

                        scdr << data.Vd();

                        scdr << data.Roll();

                        scdr << data.Pitch();

                        scdr << data.Yaw();

                        scdr << data.Bias();

                        scdr << data.Drift();

                        scdr << data.P0();

                        scdr << data.P1();

                        scdr << data.P2();

                        scdr << data.P3();

                        scdr << data.P4();

                        scdr << data.P5();

                        scdr << data.P6();

                        scdr << data.P7();

                        scdr << data.P8();

                        scdr << data.P9();

                        scdr << data.P10();

}



} // namespace fastcdr
} // namespace eprosima

#endif // FAST_DDS_GENERATED__NAVMESSAGECDRAUX_IPP

