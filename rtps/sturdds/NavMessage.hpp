// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavMessage.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__NAVMESSAGE_HPP
#define FAST_DDS_GENERATED__NAVMESSAGE_HPP

#include <cstdint>
#include <utility>
#include "Header.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(NAVMESSAGE_SOURCE)
#define NAVMESSAGE_DllAPI __declspec( dllexport )
#else
#define NAVMESSAGE_DllAPI __declspec( dllimport )
#endif // NAVMESSAGE_SOURCE
#else
#define NAVMESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define NAVMESSAGE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure NavMessage defined by the user in the IDL file.
 * @ingroup NavMessage
 */
class NavMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NavMessage()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NavMessage()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NavMessage that will be copied.
     */
    eProsima_user_DllExport NavMessage(
            const NavMessage& x)
    {
                    m_stamp = x.m_stamp;

                    m_Week = x.m_Week;

                    m_ToW = x.m_ToW;

                    m_Lat = x.m_Lat;

                    m_Lon = x.m_Lon;

                    m_H = x.m_H;

                    m_Vn = x.m_Vn;

                    m_Ve = x.m_Ve;

                    m_Vd = x.m_Vd;

                    m_Roll = x.m_Roll;

                    m_Pitch = x.m_Pitch;

                    m_Yaw = x.m_Yaw;

                    m_Bias = x.m_Bias;

                    m_Drift = x.m_Drift;

                    m_P0 = x.m_P0;

                    m_P1 = x.m_P1;

                    m_P2 = x.m_P2;

                    m_P3 = x.m_P3;

                    m_P4 = x.m_P4;

                    m_P5 = x.m_P5;

                    m_P6 = x.m_P6;

                    m_P7 = x.m_P7;

                    m_P8 = x.m_P8;

                    m_P9 = x.m_P9;

                    m_P10 = x.m_P10;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NavMessage that will be copied.
     */
    eProsima_user_DllExport NavMessage(
            NavMessage&& x) noexcept
    {
        m_stamp = std::move(x.m_stamp);
        m_Week = x.m_Week;
        m_ToW = x.m_ToW;
        m_Lat = x.m_Lat;
        m_Lon = x.m_Lon;
        m_H = x.m_H;
        m_Vn = x.m_Vn;
        m_Ve = x.m_Ve;
        m_Vd = x.m_Vd;
        m_Roll = x.m_Roll;
        m_Pitch = x.m_Pitch;
        m_Yaw = x.m_Yaw;
        m_Bias = x.m_Bias;
        m_Drift = x.m_Drift;
        m_P0 = x.m_P0;
        m_P1 = x.m_P1;
        m_P2 = x.m_P2;
        m_P3 = x.m_P3;
        m_P4 = x.m_P4;
        m_P5 = x.m_P5;
        m_P6 = x.m_P6;
        m_P7 = x.m_P7;
        m_P8 = x.m_P8;
        m_P9 = x.m_P9;
        m_P10 = x.m_P10;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NavMessage that will be copied.
     */
    eProsima_user_DllExport NavMessage& operator =(
            const NavMessage& x)
    {

                    m_stamp = x.m_stamp;

                    m_Week = x.m_Week;

                    m_ToW = x.m_ToW;

                    m_Lat = x.m_Lat;

                    m_Lon = x.m_Lon;

                    m_H = x.m_H;

                    m_Vn = x.m_Vn;

                    m_Ve = x.m_Ve;

                    m_Vd = x.m_Vd;

                    m_Roll = x.m_Roll;

                    m_Pitch = x.m_Pitch;

                    m_Yaw = x.m_Yaw;

                    m_Bias = x.m_Bias;

                    m_Drift = x.m_Drift;

                    m_P0 = x.m_P0;

                    m_P1 = x.m_P1;

                    m_P2 = x.m_P2;

                    m_P3 = x.m_P3;

                    m_P4 = x.m_P4;

                    m_P5 = x.m_P5;

                    m_P6 = x.m_P6;

                    m_P7 = x.m_P7;

                    m_P8 = x.m_P8;

                    m_P9 = x.m_P9;

                    m_P10 = x.m_P10;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NavMessage that will be copied.
     */
    eProsima_user_DllExport NavMessage& operator =(
            NavMessage&& x) noexcept
    {

        m_stamp = std::move(x.m_stamp);
        m_Week = x.m_Week;
        m_ToW = x.m_ToW;
        m_Lat = x.m_Lat;
        m_Lon = x.m_Lon;
        m_H = x.m_H;
        m_Vn = x.m_Vn;
        m_Ve = x.m_Ve;
        m_Vd = x.m_Vd;
        m_Roll = x.m_Roll;
        m_Pitch = x.m_Pitch;
        m_Yaw = x.m_Yaw;
        m_Bias = x.m_Bias;
        m_Drift = x.m_Drift;
        m_P0 = x.m_P0;
        m_P1 = x.m_P1;
        m_P2 = x.m_P2;
        m_P3 = x.m_P3;
        m_P4 = x.m_P4;
        m_P5 = x.m_P5;
        m_P6 = x.m_P6;
        m_P7 = x.m_P7;
        m_P8 = x.m_P8;
        m_P9 = x.m_P9;
        m_P10 = x.m_P10;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x NavMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NavMessage& x) const
    {
        return (m_stamp == x.m_stamp &&
           m_Week == x.m_Week &&
           m_ToW == x.m_ToW &&
           m_Lat == x.m_Lat &&
           m_Lon == x.m_Lon &&
           m_H == x.m_H &&
           m_Vn == x.m_Vn &&
           m_Ve == x.m_Ve &&
           m_Vd == x.m_Vd &&
           m_Roll == x.m_Roll &&
           m_Pitch == x.m_Pitch &&
           m_Yaw == x.m_Yaw &&
           m_Bias == x.m_Bias &&
           m_Drift == x.m_Drift &&
           m_P0 == x.m_P0 &&
           m_P1 == x.m_P1 &&
           m_P2 == x.m_P2 &&
           m_P3 == x.m_P3 &&
           m_P4 == x.m_P4 &&
           m_P5 == x.m_P5 &&
           m_P6 == x.m_P6 &&
           m_P7 == x.m_P7 &&
           m_P8 == x.m_P8 &&
           m_P9 == x.m_P9 &&
           m_P10 == x.m_P10);
    }

    /*!
     * @brief Comparison operator.
     * @param x NavMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NavMessage& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member stamp
     * @param _stamp New value to be copied in member stamp
     */
    eProsima_user_DllExport void stamp(
            const Header& _stamp)
    {
        m_stamp = _stamp;
    }

    /*!
     * @brief This function moves the value in member stamp
     * @param _stamp New value to be moved in member stamp
     */
    eProsima_user_DllExport void stamp(
            Header&& _stamp)
    {
        m_stamp = std::move(_stamp);
    }

    /*!
     * @brief This function returns a constant reference to member stamp
     * @return Constant reference to member stamp
     */
    eProsima_user_DllExport const Header& stamp() const
    {
        return m_stamp;
    }

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport Header& stamp()
    {
        return m_stamp;
    }


    /*!
     * @brief This function sets a value in member Week
     * @param _Week New value for member Week
     */
    eProsima_user_DllExport void Week(
            uint16_t _Week)
    {
        m_Week = _Week;
    }

    /*!
     * @brief This function returns the value of member Week
     * @return Value of member Week
     */
    eProsima_user_DllExport uint16_t Week() const
    {
        return m_Week;
    }

    /*!
     * @brief This function returns a reference to member Week
     * @return Reference to member Week
     */
    eProsima_user_DllExport uint16_t& Week()
    {
        return m_Week;
    }


    /*!
     * @brief This function sets a value in member ToW
     * @param _ToW New value for member ToW
     */
    eProsima_user_DllExport void ToW(
            double _ToW)
    {
        m_ToW = _ToW;
    }

    /*!
     * @brief This function returns the value of member ToW
     * @return Value of member ToW
     */
    eProsima_user_DllExport double ToW() const
    {
        return m_ToW;
    }

    /*!
     * @brief This function returns a reference to member ToW
     * @return Reference to member ToW
     */
    eProsima_user_DllExport double& ToW()
    {
        return m_ToW;
    }


    /*!
     * @brief This function sets a value in member Lat
     * @param _Lat New value for member Lat
     */
    eProsima_user_DllExport void Lat(
            double _Lat)
    {
        m_Lat = _Lat;
    }

    /*!
     * @brief This function returns the value of member Lat
     * @return Value of member Lat
     */
    eProsima_user_DllExport double Lat() const
    {
        return m_Lat;
    }

    /*!
     * @brief This function returns a reference to member Lat
     * @return Reference to member Lat
     */
    eProsima_user_DllExport double& Lat()
    {
        return m_Lat;
    }


    /*!
     * @brief This function sets a value in member Lon
     * @param _Lon New value for member Lon
     */
    eProsima_user_DllExport void Lon(
            double _Lon)
    {
        m_Lon = _Lon;
    }

    /*!
     * @brief This function returns the value of member Lon
     * @return Value of member Lon
     */
    eProsima_user_DllExport double Lon() const
    {
        return m_Lon;
    }

    /*!
     * @brief This function returns a reference to member Lon
     * @return Reference to member Lon
     */
    eProsima_user_DllExport double& Lon()
    {
        return m_Lon;
    }


    /*!
     * @brief This function sets a value in member H
     * @param _H New value for member H
     */
    eProsima_user_DllExport void H(
            double _H)
    {
        m_H = _H;
    }

    /*!
     * @brief This function returns the value of member H
     * @return Value of member H
     */
    eProsima_user_DllExport double H() const
    {
        return m_H;
    }

    /*!
     * @brief This function returns a reference to member H
     * @return Reference to member H
     */
    eProsima_user_DllExport double& H()
    {
        return m_H;
    }


    /*!
     * @brief This function sets a value in member Vn
     * @param _Vn New value for member Vn
     */
    eProsima_user_DllExport void Vn(
            double _Vn)
    {
        m_Vn = _Vn;
    }

    /*!
     * @brief This function returns the value of member Vn
     * @return Value of member Vn
     */
    eProsima_user_DllExport double Vn() const
    {
        return m_Vn;
    }

    /*!
     * @brief This function returns a reference to member Vn
     * @return Reference to member Vn
     */
    eProsima_user_DllExport double& Vn()
    {
        return m_Vn;
    }


    /*!
     * @brief This function sets a value in member Ve
     * @param _Ve New value for member Ve
     */
    eProsima_user_DllExport void Ve(
            double _Ve)
    {
        m_Ve = _Ve;
    }

    /*!
     * @brief This function returns the value of member Ve
     * @return Value of member Ve
     */
    eProsima_user_DllExport double Ve() const
    {
        return m_Ve;
    }

    /*!
     * @brief This function returns a reference to member Ve
     * @return Reference to member Ve
     */
    eProsima_user_DllExport double& Ve()
    {
        return m_Ve;
    }


    /*!
     * @brief This function sets a value in member Vd
     * @param _Vd New value for member Vd
     */
    eProsima_user_DllExport void Vd(
            double _Vd)
    {
        m_Vd = _Vd;
    }

    /*!
     * @brief This function returns the value of member Vd
     * @return Value of member Vd
     */
    eProsima_user_DllExport double Vd() const
    {
        return m_Vd;
    }

    /*!
     * @brief This function returns a reference to member Vd
     * @return Reference to member Vd
     */
    eProsima_user_DllExport double& Vd()
    {
        return m_Vd;
    }


    /*!
     * @brief This function sets a value in member Roll
     * @param _Roll New value for member Roll
     */
    eProsima_user_DllExport void Roll(
            double _Roll)
    {
        m_Roll = _Roll;
    }

    /*!
     * @brief This function returns the value of member Roll
     * @return Value of member Roll
     */
    eProsima_user_DllExport double Roll() const
    {
        return m_Roll;
    }

    /*!
     * @brief This function returns a reference to member Roll
     * @return Reference to member Roll
     */
    eProsima_user_DllExport double& Roll()
    {
        return m_Roll;
    }


    /*!
     * @brief This function sets a value in member Pitch
     * @param _Pitch New value for member Pitch
     */
    eProsima_user_DllExport void Pitch(
            double _Pitch)
    {
        m_Pitch = _Pitch;
    }

    /*!
     * @brief This function returns the value of member Pitch
     * @return Value of member Pitch
     */
    eProsima_user_DllExport double Pitch() const
    {
        return m_Pitch;
    }

    /*!
     * @brief This function returns a reference to member Pitch
     * @return Reference to member Pitch
     */
    eProsima_user_DllExport double& Pitch()
    {
        return m_Pitch;
    }


    /*!
     * @brief This function sets a value in member Yaw
     * @param _Yaw New value for member Yaw
     */
    eProsima_user_DllExport void Yaw(
            double _Yaw)
    {
        m_Yaw = _Yaw;
    }

    /*!
     * @brief This function returns the value of member Yaw
     * @return Value of member Yaw
     */
    eProsima_user_DllExport double Yaw() const
    {
        return m_Yaw;
    }

    /*!
     * @brief This function returns a reference to member Yaw
     * @return Reference to member Yaw
     */
    eProsima_user_DllExport double& Yaw()
    {
        return m_Yaw;
    }


    /*!
     * @brief This function sets a value in member Bias
     * @param _Bias New value for member Bias
     */
    eProsima_user_DllExport void Bias(
            double _Bias)
    {
        m_Bias = _Bias;
    }

    /*!
     * @brief This function returns the value of member Bias
     * @return Value of member Bias
     */
    eProsima_user_DllExport double Bias() const
    {
        return m_Bias;
    }

    /*!
     * @brief This function returns a reference to member Bias
     * @return Reference to member Bias
     */
    eProsima_user_DllExport double& Bias()
    {
        return m_Bias;
    }


    /*!
     * @brief This function sets a value in member Drift
     * @param _Drift New value for member Drift
     */
    eProsima_user_DllExport void Drift(
            double _Drift)
    {
        m_Drift = _Drift;
    }

    /*!
     * @brief This function returns the value of member Drift
     * @return Value of member Drift
     */
    eProsima_user_DllExport double Drift() const
    {
        return m_Drift;
    }

    /*!
     * @brief This function returns a reference to member Drift
     * @return Reference to member Drift
     */
    eProsima_user_DllExport double& Drift()
    {
        return m_Drift;
    }


    /*!
     * @brief This function sets a value in member P0
     * @param _P0 New value for member P0
     */
    eProsima_user_DllExport void P0(
            double _P0)
    {
        m_P0 = _P0;
    }

    /*!
     * @brief This function returns the value of member P0
     * @return Value of member P0
     */
    eProsima_user_DllExport double P0() const
    {
        return m_P0;
    }

    /*!
     * @brief This function returns a reference to member P0
     * @return Reference to member P0
     */
    eProsima_user_DllExport double& P0()
    {
        return m_P0;
    }


    /*!
     * @brief This function sets a value in member P1
     * @param _P1 New value for member P1
     */
    eProsima_user_DllExport void P1(
            double _P1)
    {
        m_P1 = _P1;
    }

    /*!
     * @brief This function returns the value of member P1
     * @return Value of member P1
     */
    eProsima_user_DllExport double P1() const
    {
        return m_P1;
    }

    /*!
     * @brief This function returns a reference to member P1
     * @return Reference to member P1
     */
    eProsima_user_DllExport double& P1()
    {
        return m_P1;
    }


    /*!
     * @brief This function sets a value in member P2
     * @param _P2 New value for member P2
     */
    eProsima_user_DllExport void P2(
            double _P2)
    {
        m_P2 = _P2;
    }

    /*!
     * @brief This function returns the value of member P2
     * @return Value of member P2
     */
    eProsima_user_DllExport double P2() const
    {
        return m_P2;
    }

    /*!
     * @brief This function returns a reference to member P2
     * @return Reference to member P2
     */
    eProsima_user_DllExport double& P2()
    {
        return m_P2;
    }


    /*!
     * @brief This function sets a value in member P3
     * @param _P3 New value for member P3
     */
    eProsima_user_DllExport void P3(
            double _P3)
    {
        m_P3 = _P3;
    }

    /*!
     * @brief This function returns the value of member P3
     * @return Value of member P3
     */
    eProsima_user_DllExport double P3() const
    {
        return m_P3;
    }

    /*!
     * @brief This function returns a reference to member P3
     * @return Reference to member P3
     */
    eProsima_user_DllExport double& P3()
    {
        return m_P3;
    }


    /*!
     * @brief This function sets a value in member P4
     * @param _P4 New value for member P4
     */
    eProsima_user_DllExport void P4(
            double _P4)
    {
        m_P4 = _P4;
    }

    /*!
     * @brief This function returns the value of member P4
     * @return Value of member P4
     */
    eProsima_user_DllExport double P4() const
    {
        return m_P4;
    }

    /*!
     * @brief This function returns a reference to member P4
     * @return Reference to member P4
     */
    eProsima_user_DllExport double& P4()
    {
        return m_P4;
    }


    /*!
     * @brief This function sets a value in member P5
     * @param _P5 New value for member P5
     */
    eProsima_user_DllExport void P5(
            double _P5)
    {
        m_P5 = _P5;
    }

    /*!
     * @brief This function returns the value of member P5
     * @return Value of member P5
     */
    eProsima_user_DllExport double P5() const
    {
        return m_P5;
    }

    /*!
     * @brief This function returns a reference to member P5
     * @return Reference to member P5
     */
    eProsima_user_DllExport double& P5()
    {
        return m_P5;
    }


    /*!
     * @brief This function sets a value in member P6
     * @param _P6 New value for member P6
     */
    eProsima_user_DllExport void P6(
            double _P6)
    {
        m_P6 = _P6;
    }

    /*!
     * @brief This function returns the value of member P6
     * @return Value of member P6
     */
    eProsima_user_DllExport double P6() const
    {
        return m_P6;
    }

    /*!
     * @brief This function returns a reference to member P6
     * @return Reference to member P6
     */
    eProsima_user_DllExport double& P6()
    {
        return m_P6;
    }


    /*!
     * @brief This function sets a value in member P7
     * @param _P7 New value for member P7
     */
    eProsima_user_DllExport void P7(
            double _P7)
    {
        m_P7 = _P7;
    }

    /*!
     * @brief This function returns the value of member P7
     * @return Value of member P7
     */
    eProsima_user_DllExport double P7() const
    {
        return m_P7;
    }

    /*!
     * @brief This function returns a reference to member P7
     * @return Reference to member P7
     */
    eProsima_user_DllExport double& P7()
    {
        return m_P7;
    }


    /*!
     * @brief This function sets a value in member P8
     * @param _P8 New value for member P8
     */
    eProsima_user_DllExport void P8(
            double _P8)
    {
        m_P8 = _P8;
    }

    /*!
     * @brief This function returns the value of member P8
     * @return Value of member P8
     */
    eProsima_user_DllExport double P8() const
    {
        return m_P8;
    }

    /*!
     * @brief This function returns a reference to member P8
     * @return Reference to member P8
     */
    eProsima_user_DllExport double& P8()
    {
        return m_P8;
    }


    /*!
     * @brief This function sets a value in member P9
     * @param _P9 New value for member P9
     */
    eProsima_user_DllExport void P9(
            double _P9)
    {
        m_P9 = _P9;
    }

    /*!
     * @brief This function returns the value of member P9
     * @return Value of member P9
     */
    eProsima_user_DllExport double P9() const
    {
        return m_P9;
    }

    /*!
     * @brief This function returns a reference to member P9
     * @return Reference to member P9
     */
    eProsima_user_DllExport double& P9()
    {
        return m_P9;
    }


    /*!
     * @brief This function sets a value in member P10
     * @param _P10 New value for member P10
     */
    eProsima_user_DllExport void P10(
            double _P10)
    {
        m_P10 = _P10;
    }

    /*!
     * @brief This function returns the value of member P10
     * @return Value of member P10
     */
    eProsima_user_DllExport double P10() const
    {
        return m_P10;
    }

    /*!
     * @brief This function returns a reference to member P10
     * @return Reference to member P10
     */
    eProsima_user_DllExport double& P10()
    {
        return m_P10;
    }



private:

    Header m_stamp;
    uint16_t m_Week{0};
    double m_ToW{0.0};
    double m_Lat{0.0};
    double m_Lon{0.0};
    double m_H{0.0};
    double m_Vn{0.0};
    double m_Ve{0.0};
    double m_Vd{0.0};
    double m_Roll{0.0};
    double m_Pitch{0.0};
    double m_Yaw{0.0};
    double m_Bias{0.0};
    double m_Drift{0.0};
    double m_P0{0.0};
    double m_P1{0.0};
    double m_P2{0.0};
    double m_P3{0.0};
    double m_P4{0.0};
    double m_P5{0.0};
    double m_P6{0.0};
    double m_P7{0.0};
    double m_P8{0.0};
    double m_P9{0.0};
    double m_P10{0.0};

};

#endif // _FAST_DDS_GENERATED_NAVMESSAGE_HPP_


