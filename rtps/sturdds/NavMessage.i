// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavMessage.i
 * This header file contains the SWIG interface of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

%module(moduleimport="if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('NavMessage.dll')\nif __package__ or '.' in __name__:\n    from . import _NavMessageWrapper\nelse:\n    import _NavMessageWrapper") NavMessage

// If using windows in debug, it would try to use python_d, which would not be found.
%begin %{
#ifdef _MSC_VER
#define SWIG_PYTHON_INTERPRETER_NO_DEBUG
#endif
#include <exception>
%}

// SWIG helper modules
%include "stdint.i"
%include "std_array.i"
%include "std_map.i"
%include "std_string.i"
%include "std_vector.i"
%include "typemaps.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

// Macro declarations
// Any macro used on the Fast DDS header files will give an error if it is not redefined here
#define FASTDDS_EXPORTED_API
#define eProsima_user_DllExport

%include "Header.i"

%{
#include "NavMessage.hpp"

#include <fastdds/dds/core/LoanableSequence.hpp>
%}

%include <fastcdr/config.h>
%import(module="fastdds") "fastdds/dds/core/LoanableCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableTypedCollection.hpp"
%import(module="fastdds") "fastdds/dds/core/LoanableSequence.hpp"

%define %traits_penumn(Type...)
  %fragment(SWIG_Traits_frag(Type),"header",
        fragment="StdTraits") {
namespace swig {
  template <> struct traits< Type > {
    typedef value_category category;
    static const char* type_name() { return  #Type; }
  };
}
}
%enddef

////////////////////////////////////////////////////////
// Binding for class NavMessage
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore NavMessage::NavMessage(NavMessage&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
%ignore NavMessage::stamp(Header&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::stamp();
%rename("%s") NavMessage::stamp() const;



%ignore NavMessage::Week(uint16_t&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Week();
%rename("%s") NavMessage::Week() const;



%ignore NavMessage::ToW(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::ToW();
%rename("%s") NavMessage::ToW() const;



%ignore NavMessage::Lat(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Lat();
%rename("%s") NavMessage::Lat() const;



%ignore NavMessage::Lon(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Lon();
%rename("%s") NavMessage::Lon() const;



%ignore NavMessage::H(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::H();
%rename("%s") NavMessage::H() const;



%ignore NavMessage::Vn(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Vn();
%rename("%s") NavMessage::Vn() const;



%ignore NavMessage::Ve(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Ve();
%rename("%s") NavMessage::Ve() const;



%ignore NavMessage::Vd(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Vd();
%rename("%s") NavMessage::Vd() const;



%ignore NavMessage::Roll(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Roll();
%rename("%s") NavMessage::Roll() const;



%ignore NavMessage::Pitch(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Pitch();
%rename("%s") NavMessage::Pitch() const;



%ignore NavMessage::Yaw(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Yaw();
%rename("%s") NavMessage::Yaw() const;



%ignore NavMessage::Bias(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Bias();
%rename("%s") NavMessage::Bias() const;



%ignore NavMessage::Drift(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::Drift();
%rename("%s") NavMessage::Drift() const;



%ignore NavMessage::P0(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P0();
%rename("%s") NavMessage::P0() const;



%ignore NavMessage::P1(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P1();
%rename("%s") NavMessage::P1() const;



%ignore NavMessage::P2(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P2();
%rename("%s") NavMessage::P2() const;



%ignore NavMessage::P3(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P3();
%rename("%s") NavMessage::P3() const;



%ignore NavMessage::P4(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P4();
%rename("%s") NavMessage::P4() const;



%ignore NavMessage::P5(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P5();
%rename("%s") NavMessage::P5() const;



%ignore NavMessage::P6(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P6();
%rename("%s") NavMessage::P6() const;



%ignore NavMessage::P7(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P7();
%rename("%s") NavMessage::P7() const;



%ignore NavMessage::P8(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P8();
%rename("%s") NavMessage::P8() const;



%ignore NavMessage::P9(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P9();
%rename("%s") NavMessage::P9() const;



%ignore NavMessage::P10(double&&);


// Overloaded getter methods shadow each other and are equivalent in python
// Const accesors produced constant enums instead of arrays/dictionaries when used
// We ignore them to prevent this
%ignore NavMessage::P10();
%rename("%s") NavMessage::P10() const;



%template(_NavMessageSeq) eprosima::fastdds::dds::LoanableTypedCollection<NavMessage, std::false_type>;
%template(NavMessageSeq) eprosima::fastdds::dds::LoanableSequence<NavMessage, std::false_type>;
%extend eprosima::fastdds::dds::LoanableSequence<NavMessage, std::false_type>
{
    size_t __len__() const
    {
        return self->length();
    }

    const NavMessage& __getitem__(size_t i) const
    {
        return (*self)[i];
    }
}


// Include the class interfaces
%include "NavMessage.hpp"

// Include the corresponding TopicDataType
%include "NavMessagePubSubTypes.i"

