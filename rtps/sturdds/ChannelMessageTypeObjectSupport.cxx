// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ChannelMessageTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "ChannelMessageTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "ChannelMessage.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ChannelMessage_type_identifier(
        TypeIdentifierPair& type_ids_ChannelMessage)
{

    ReturnCode_t return_code_ChannelMessage {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ChannelMessage =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ChannelMessage", type_ids_ChannelMessage);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ChannelMessage)
    {
        StructTypeFlag struct_flags_ChannelMessage = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ChannelMessage = "ChannelMessage";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ChannelMessage;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ChannelMessage;
        CompleteTypeDetail detail_ChannelMessage = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ChannelMessage, ann_custom_ChannelMessage, type_name_ChannelMessage.to_string());
        CompleteStructHeader header_ChannelMessage;
        header_ChannelMessage = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ChannelMessage);
        CompleteStructMemberSeq member_seq_ChannelMessage;
        {
            TypeIdentifierPair type_ids_stamp;
            ReturnCode_t return_code_stamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_stamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Header", type_ids_stamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_stamp)
            {
            ::register_Header_type_identifier(type_ids_stamp);
            }
            StructMemberFlag member_flags_stamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_stamp = 0x00000000;
            bool common_stamp_ec {false};
            CommonStructMember common_stamp {TypeObjectUtils::build_common_struct_member(member_id_stamp, member_flags_stamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_stamp, common_stamp_ec))};
            if (!common_stamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure stamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_stamp = "stamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_stamp;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_stamp = TypeObjectUtils::build_complete_member_detail(name_stamp, member_ann_builtin_stamp, ann_custom_ChannelMessage);
            CompleteStructMember member_stamp = TypeObjectUtils::build_complete_struct_member(common_stamp, detail_stamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_stamp);
        }
        {
            TypeIdentifierPair type_ids_ChannelID;
            ReturnCode_t return_code_ChannelID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ChannelID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_ChannelID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ChannelID)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ChannelID Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ChannelID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ChannelID = 0x00000001;
            bool common_ChannelID_ec {false};
            CommonStructMember common_ChannelID {TypeObjectUtils::build_common_struct_member(member_id_ChannelID, member_flags_ChannelID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ChannelID, common_ChannelID_ec))};
            if (!common_ChannelID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ChannelID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ChannelID = "ChannelID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChannelID;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_ChannelID = TypeObjectUtils::build_complete_member_detail(name_ChannelID, member_ann_builtin_ChannelID, ann_custom_ChannelMessage);
            CompleteStructMember member_ChannelID = TypeObjectUtils::build_complete_struct_member(common_ChannelID, detail_ChannelID);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_ChannelID);
        }
        {
            TypeIdentifierPair type_ids_SatelliteID;
            ReturnCode_t return_code_SatelliteID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SatelliteID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_SatelliteID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SatelliteID)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SatelliteID Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_SatelliteID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SatelliteID = 0x00000002;
            bool common_SatelliteID_ec {false};
            CommonStructMember common_SatelliteID {TypeObjectUtils::build_common_struct_member(member_id_SatelliteID, member_flags_SatelliteID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SatelliteID, common_SatelliteID_ec))};
            if (!common_SatelliteID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SatelliteID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SatelliteID = "SatelliteID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SatelliteID;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_SatelliteID = TypeObjectUtils::build_complete_member_detail(name_SatelliteID, member_ann_builtin_SatelliteID, ann_custom_ChannelMessage);
            CompleteStructMember member_SatelliteID = TypeObjectUtils::build_complete_struct_member(common_SatelliteID, detail_SatelliteID);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_SatelliteID);
        }
        {
            TypeIdentifierPair type_ids_ConstellationID;
            ReturnCode_t return_code_ConstellationID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ConstellationID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_ConstellationID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ConstellationID)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ConstellationID Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ConstellationID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ConstellationID = 0x00000003;
            bool common_ConstellationID_ec {false};
            CommonStructMember common_ConstellationID {TypeObjectUtils::build_common_struct_member(member_id_ConstellationID, member_flags_ConstellationID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ConstellationID, common_ConstellationID_ec))};
            if (!common_ConstellationID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ConstellationID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ConstellationID = "ConstellationID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ConstellationID;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_ConstellationID = TypeObjectUtils::build_complete_member_detail(name_ConstellationID, member_ann_builtin_ConstellationID, ann_custom_ChannelMessage);
            CompleteStructMember member_ConstellationID = TypeObjectUtils::build_complete_struct_member(common_ConstellationID, detail_ConstellationID);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_ConstellationID);
        }
        {
            TypeIdentifierPair type_ids_SignalID;
            ReturnCode_t return_code_SignalID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SignalID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_SignalID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SignalID)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SignalID Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_SignalID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SignalID = 0x00000004;
            bool common_SignalID_ec {false};
            CommonStructMember common_SignalID {TypeObjectUtils::build_common_struct_member(member_id_SignalID, member_flags_SignalID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SignalID, common_SignalID_ec))};
            if (!common_SignalID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SignalID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SignalID = "SignalID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SignalID;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_SignalID = TypeObjectUtils::build_complete_member_detail(name_SignalID, member_ann_builtin_SignalID, ann_custom_ChannelMessage);
            CompleteStructMember member_SignalID = TypeObjectUtils::build_complete_struct_member(common_SignalID, detail_SignalID);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_SignalID);
        }
        {
            TypeIdentifierPair type_ids_ChannelStatus;
            ReturnCode_t return_code_ChannelStatus {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ChannelStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_ChannelStatus);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ChannelStatus)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ChannelStatus Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ChannelStatus = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ChannelStatus = 0x00000005;
            bool common_ChannelStatus_ec {false};
            CommonStructMember common_ChannelStatus {TypeObjectUtils::build_common_struct_member(member_id_ChannelStatus, member_flags_ChannelStatus, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ChannelStatus, common_ChannelStatus_ec))};
            if (!common_ChannelStatus_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ChannelStatus member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ChannelStatus = "ChannelStatus";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ChannelStatus;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_ChannelStatus = TypeObjectUtils::build_complete_member_detail(name_ChannelStatus, member_ann_builtin_ChannelStatus, ann_custom_ChannelMessage);
            CompleteStructMember member_ChannelStatus = TypeObjectUtils::build_complete_struct_member(common_ChannelStatus, detail_ChannelStatus);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_ChannelStatus);
        }
        {
            TypeIdentifierPair type_ids_Week;
            ReturnCode_t return_code_Week {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Week =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_Week);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Week)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Week Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Week = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Week = 0x00000006;
            bool common_Week_ec {false};
            CommonStructMember common_Week {TypeObjectUtils::build_common_struct_member(member_id_Week, member_flags_Week, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Week, common_Week_ec))};
            if (!common_Week_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Week member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Week = "Week";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Week;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_Week = TypeObjectUtils::build_complete_member_detail(name_Week, member_ann_builtin_Week, ann_custom_ChannelMessage);
            CompleteStructMember member_Week = TypeObjectUtils::build_complete_struct_member(common_Week, detail_Week);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_Week);
        }
        {
            TypeIdentifierPair type_ids_ToW;
            ReturnCode_t return_code_ToW {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ToW =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_ToW);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ToW)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ToW Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ToW = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ToW = 0x00000007;
            bool common_ToW_ec {false};
            CommonStructMember common_ToW {TypeObjectUtils::build_common_struct_member(member_id_ToW, member_flags_ToW, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ToW, common_ToW_ec))};
            if (!common_ToW_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ToW member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ToW = "ToW";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ToW;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_ToW = TypeObjectUtils::build_complete_member_detail(name_ToW, member_ann_builtin_ToW, ann_custom_ChannelMessage);
            CompleteStructMember member_ToW = TypeObjectUtils::build_complete_struct_member(common_ToW, detail_ToW);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_ToW);
        }
        {
            TypeIdentifierPair type_ids_Doppler;
            ReturnCode_t return_code_Doppler {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Doppler =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Doppler);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Doppler)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Doppler Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Doppler = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Doppler = 0x00000008;
            bool common_Doppler_ec {false};
            CommonStructMember common_Doppler {TypeObjectUtils::build_common_struct_member(member_id_Doppler, member_flags_Doppler, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Doppler, common_Doppler_ec))};
            if (!common_Doppler_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Doppler member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Doppler = "Doppler";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Doppler;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_Doppler = TypeObjectUtils::build_complete_member_detail(name_Doppler, member_ann_builtin_Doppler, ann_custom_ChannelMessage);
            CompleteStructMember member_Doppler = TypeObjectUtils::build_complete_struct_member(common_Doppler, detail_Doppler);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_Doppler);
        }
        {
            TypeIdentifierPair type_ids_DopplerVariance;
            ReturnCode_t return_code_DopplerVariance {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DopplerVariance =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_DopplerVariance);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DopplerVariance)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "DopplerVariance Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_DopplerVariance = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DopplerVariance = 0x00000009;
            bool common_DopplerVariance_ec {false};
            CommonStructMember common_DopplerVariance {TypeObjectUtils::build_common_struct_member(member_id_DopplerVariance, member_flags_DopplerVariance, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DopplerVariance, common_DopplerVariance_ec))};
            if (!common_DopplerVariance_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DopplerVariance member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DopplerVariance = "DopplerVariance";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DopplerVariance;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_DopplerVariance = TypeObjectUtils::build_complete_member_detail(name_DopplerVariance, member_ann_builtin_DopplerVariance, ann_custom_ChannelMessage);
            CompleteStructMember member_DopplerVariance = TypeObjectUtils::build_complete_struct_member(common_DopplerVariance, detail_DopplerVariance);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_DopplerVariance);
        }
        {
            TypeIdentifierPair type_ids_Pseudorange;
            ReturnCode_t return_code_Pseudorange {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Pseudorange =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Pseudorange);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Pseudorange)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Pseudorange Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Pseudorange = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Pseudorange = 0x0000000a;
            bool common_Pseudorange_ec {false};
            CommonStructMember common_Pseudorange {TypeObjectUtils::build_common_struct_member(member_id_Pseudorange, member_flags_Pseudorange, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Pseudorange, common_Pseudorange_ec))};
            if (!common_Pseudorange_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Pseudorange member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Pseudorange = "Pseudorange";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Pseudorange;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_Pseudorange = TypeObjectUtils::build_complete_member_detail(name_Pseudorange, member_ann_builtin_Pseudorange, ann_custom_ChannelMessage);
            CompleteStructMember member_Pseudorange = TypeObjectUtils::build_complete_struct_member(common_Pseudorange, detail_Pseudorange);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_Pseudorange);
        }
        {
            TypeIdentifierPair type_ids_PseudorangeVariance;
            ReturnCode_t return_code_PseudorangeVariance {eprosima::fastdds::dds::RETCODE_OK};
            return_code_PseudorangeVariance =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_PseudorangeVariance);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_PseudorangeVariance)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "PseudorangeVariance Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_PseudorangeVariance = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_PseudorangeVariance = 0x0000000b;
            bool common_PseudorangeVariance_ec {false};
            CommonStructMember common_PseudorangeVariance {TypeObjectUtils::build_common_struct_member(member_id_PseudorangeVariance, member_flags_PseudorangeVariance, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_PseudorangeVariance, common_PseudorangeVariance_ec))};
            if (!common_PseudorangeVariance_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure PseudorangeVariance member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_PseudorangeVariance = "PseudorangeVariance";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_PseudorangeVariance;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_PseudorangeVariance = TypeObjectUtils::build_complete_member_detail(name_PseudorangeVariance, member_ann_builtin_PseudorangeVariance, ann_custom_ChannelMessage);
            CompleteStructMember member_PseudorangeVariance = TypeObjectUtils::build_complete_struct_member(common_PseudorangeVariance, detail_PseudorangeVariance);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_PseudorangeVariance);
        }
        {
            TypeIdentifierPair type_ids_CarrierPhase;
            ReturnCode_t return_code_CarrierPhase {eprosima::fastdds::dds::RETCODE_OK};
            return_code_CarrierPhase =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_CarrierPhase);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_CarrierPhase)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "CarrierPhase Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_CarrierPhase = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_CarrierPhase = 0x0000000c;
            bool common_CarrierPhase_ec {false};
            CommonStructMember common_CarrierPhase {TypeObjectUtils::build_common_struct_member(member_id_CarrierPhase, member_flags_CarrierPhase, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_CarrierPhase, common_CarrierPhase_ec))};
            if (!common_CarrierPhase_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure CarrierPhase member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_CarrierPhase = "CarrierPhase";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_CarrierPhase;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_CarrierPhase = TypeObjectUtils::build_complete_member_detail(name_CarrierPhase, member_ann_builtin_CarrierPhase, ann_custom_ChannelMessage);
            CompleteStructMember member_CarrierPhase = TypeObjectUtils::build_complete_struct_member(common_CarrierPhase, detail_CarrierPhase);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_CarrierPhase);
        }
        {
            TypeIdentifierPair type_ids_CarrierPhaseVariance;
            ReturnCode_t return_code_CarrierPhaseVariance {eprosima::fastdds::dds::RETCODE_OK};
            return_code_CarrierPhaseVariance =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_CarrierPhaseVariance);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_CarrierPhaseVariance)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "CarrierPhaseVariance Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_CarrierPhaseVariance = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_CarrierPhaseVariance = 0x0000000d;
            bool common_CarrierPhaseVariance_ec {false};
            CommonStructMember common_CarrierPhaseVariance {TypeObjectUtils::build_common_struct_member(member_id_CarrierPhaseVariance, member_flags_CarrierPhaseVariance, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_CarrierPhaseVariance, common_CarrierPhaseVariance_ec))};
            if (!common_CarrierPhaseVariance_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure CarrierPhaseVariance member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_CarrierPhaseVariance = "CarrierPhaseVariance";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_CarrierPhaseVariance;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_CarrierPhaseVariance = TypeObjectUtils::build_complete_member_detail(name_CarrierPhaseVariance, member_ann_builtin_CarrierPhaseVariance, ann_custom_ChannelMessage);
            CompleteStructMember member_CarrierPhaseVariance = TypeObjectUtils::build_complete_struct_member(common_CarrierPhaseVariance, detail_CarrierPhaseVariance);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_CarrierPhaseVariance);
        }
        {
            TypeIdentifierPair type_ids_CNo;
            ReturnCode_t return_code_CNo {eprosima::fastdds::dds::RETCODE_OK};
            return_code_CNo =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_CNo);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_CNo)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "CNo Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_CNo = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_CNo = 0x0000000e;
            bool common_CNo_ec {false};
            CommonStructMember common_CNo {TypeObjectUtils::build_common_struct_member(member_id_CNo, member_flags_CNo, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_CNo, common_CNo_ec))};
            if (!common_CNo_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure CNo member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_CNo = "CNo";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_CNo;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_CNo = TypeObjectUtils::build_complete_member_detail(name_CNo, member_ann_builtin_CNo, ann_custom_ChannelMessage);
            CompleteStructMember member_CNo = TypeObjectUtils::build_complete_struct_member(common_CNo, detail_CNo);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_CNo);
        }
        {
            TypeIdentifierPair type_ids_Azimuth;
            ReturnCode_t return_code_Azimuth {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Azimuth =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Azimuth);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Azimuth)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Azimuth Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Azimuth = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Azimuth = 0x0000000f;
            bool common_Azimuth_ec {false};
            CommonStructMember common_Azimuth {TypeObjectUtils::build_common_struct_member(member_id_Azimuth, member_flags_Azimuth, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Azimuth, common_Azimuth_ec))};
            if (!common_Azimuth_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Azimuth member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Azimuth = "Azimuth";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Azimuth;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_Azimuth = TypeObjectUtils::build_complete_member_detail(name_Azimuth, member_ann_builtin_Azimuth, ann_custom_ChannelMessage);
            CompleteStructMember member_Azimuth = TypeObjectUtils::build_complete_struct_member(common_Azimuth, detail_Azimuth);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_Azimuth);
        }
        {
            TypeIdentifierPair type_ids_Elevation;
            ReturnCode_t return_code_Elevation {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Elevation =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_Elevation);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Elevation)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Elevation Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Elevation = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Elevation = 0x00000010;
            bool common_Elevation_ec {false};
            CommonStructMember common_Elevation {TypeObjectUtils::build_common_struct_member(member_id_Elevation, member_flags_Elevation, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Elevation, common_Elevation_ec))};
            if (!common_Elevation_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Elevation member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Elevation = "Elevation";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Elevation;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_Elevation = TypeObjectUtils::build_complete_member_detail(name_Elevation, member_ann_builtin_Elevation, ann_custom_ChannelMessage);
            CompleteStructMember member_Elevation = TypeObjectUtils::build_complete_struct_member(common_Elevation, detail_Elevation);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_Elevation);
        }
        {
            TypeIdentifierPair type_ids_IE;
            ReturnCode_t return_code_IE {eprosima::fastdds::dds::RETCODE_OK};
            return_code_IE =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_IE);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_IE)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "IE Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_IE = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_IE = 0x00000011;
            bool common_IE_ec {false};
            CommonStructMember common_IE {TypeObjectUtils::build_common_struct_member(member_id_IE, member_flags_IE, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_IE, common_IE_ec))};
            if (!common_IE_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure IE member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_IE = "IE";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_IE;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_IE = TypeObjectUtils::build_complete_member_detail(name_IE, member_ann_builtin_IE, ann_custom_ChannelMessage);
            CompleteStructMember member_IE = TypeObjectUtils::build_complete_struct_member(common_IE, detail_IE);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_IE);
        }
        {
            TypeIdentifierPair type_ids_IP;
            ReturnCode_t return_code_IP {eprosima::fastdds::dds::RETCODE_OK};
            return_code_IP =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_IP);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_IP)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "IP Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_IP = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_IP = 0x00000012;
            bool common_IP_ec {false};
            CommonStructMember common_IP {TypeObjectUtils::build_common_struct_member(member_id_IP, member_flags_IP, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_IP, common_IP_ec))};
            if (!common_IP_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure IP member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_IP = "IP";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_IP;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_IP = TypeObjectUtils::build_complete_member_detail(name_IP, member_ann_builtin_IP, ann_custom_ChannelMessage);
            CompleteStructMember member_IP = TypeObjectUtils::build_complete_struct_member(common_IP, detail_IP);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_IP);
        }
        {
            TypeIdentifierPair type_ids_IL;
            ReturnCode_t return_code_IL {eprosima::fastdds::dds::RETCODE_OK};
            return_code_IL =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_IL);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_IL)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "IL Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_IL = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_IL = 0x00000013;
            bool common_IL_ec {false};
            CommonStructMember common_IL {TypeObjectUtils::build_common_struct_member(member_id_IL, member_flags_IL, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_IL, common_IL_ec))};
            if (!common_IL_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure IL member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_IL = "IL";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_IL;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_IL = TypeObjectUtils::build_complete_member_detail(name_IL, member_ann_builtin_IL, ann_custom_ChannelMessage);
            CompleteStructMember member_IL = TypeObjectUtils::build_complete_struct_member(common_IL, detail_IL);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_IL);
        }
        {
            TypeIdentifierPair type_ids_QE;
            ReturnCode_t return_code_QE {eprosima::fastdds::dds::RETCODE_OK};
            return_code_QE =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_QE);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_QE)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "QE Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_QE = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_QE = 0x00000014;
            bool common_QE_ec {false};
            CommonStructMember common_QE {TypeObjectUtils::build_common_struct_member(member_id_QE, member_flags_QE, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_QE, common_QE_ec))};
            if (!common_QE_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure QE member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_QE = "QE";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_QE;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_QE = TypeObjectUtils::build_complete_member_detail(name_QE, member_ann_builtin_QE, ann_custom_ChannelMessage);
            CompleteStructMember member_QE = TypeObjectUtils::build_complete_struct_member(common_QE, detail_QE);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_QE);
        }
        {
            TypeIdentifierPair type_ids_QP;
            ReturnCode_t return_code_QP {eprosima::fastdds::dds::RETCODE_OK};
            return_code_QP =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_QP);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_QP)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "QP Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_QP = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_QP = 0x00000015;
            bool common_QP_ec {false};
            CommonStructMember common_QP {TypeObjectUtils::build_common_struct_member(member_id_QP, member_flags_QP, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_QP, common_QP_ec))};
            if (!common_QP_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure QP member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_QP = "QP";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_QP;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_QP = TypeObjectUtils::build_complete_member_detail(name_QP, member_ann_builtin_QP, ann_custom_ChannelMessage);
            CompleteStructMember member_QP = TypeObjectUtils::build_complete_struct_member(common_QP, detail_QP);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_QP);
        }
        {
            TypeIdentifierPair type_ids_QL;
            ReturnCode_t return_code_QL {eprosima::fastdds::dds::RETCODE_OK};
            return_code_QL =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_QL);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_QL)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "QL Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_QL = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_QL = 0x00000016;
            bool common_QL_ec {false};
            CommonStructMember common_QL {TypeObjectUtils::build_common_struct_member(member_id_QL, member_flags_QL, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_QL, common_QL_ec))};
            if (!common_QL_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure QL member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_QL = "QL";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_QL;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_QL = TypeObjectUtils::build_complete_member_detail(name_QL, member_ann_builtin_QL, ann_custom_ChannelMessage);
            CompleteStructMember member_QL = TypeObjectUtils::build_complete_struct_member(common_QL, detail_QL);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_QL);
        }
        {
            TypeIdentifierPair type_ids_TapSpace;
            ReturnCode_t return_code_TapSpace {eprosima::fastdds::dds::RETCODE_OK};
            return_code_TapSpace =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_TapSpace);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_TapSpace)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "TapSpace Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_TapSpace = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_TapSpace = 0x00000017;
            bool common_TapSpace_ec {false};
            CommonStructMember common_TapSpace {TypeObjectUtils::build_common_struct_member(member_id_TapSpace, member_flags_TapSpace, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_TapSpace, common_TapSpace_ec))};
            if (!common_TapSpace_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure TapSpace member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_TapSpace = "TapSpace";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TapSpace;
            ann_custom_ChannelMessage.reset();
            CompleteMemberDetail detail_TapSpace = TypeObjectUtils::build_complete_member_detail(name_TapSpace, member_ann_builtin_TapSpace, ann_custom_ChannelMessage);
            CompleteStructMember member_TapSpace = TypeObjectUtils::build_complete_struct_member(common_TapSpace, detail_TapSpace);
            TypeObjectUtils::add_complete_struct_member(member_seq_ChannelMessage, member_TapSpace);
        }
        CompleteStructType struct_type_ChannelMessage = TypeObjectUtils::build_complete_struct_type(struct_flags_ChannelMessage, header_ChannelMessage, member_seq_ChannelMessage);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ChannelMessage, type_name_ChannelMessage.to_string(), type_ids_ChannelMessage))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ChannelMessage already registered in TypeObjectRegistry for a different type.");
        }
    }
}

